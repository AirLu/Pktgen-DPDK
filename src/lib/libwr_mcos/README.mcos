                           MCOS - Multi-Core OS


 MCOS header file with many inline functions and structures.

 Multi-core OS (MCOS) is a non-preemptive OS using a light weight user
 level threading model. The basic design under the hood uses setcontext,
 getcontext, makecontext and swapcontext to provide the light weight
 threading model. Some times the threads are called fibers to be different
 from pthreads or other threading models.

 No Fiber is ever preempted and the only time a reschedule can occur is
 when a fiber or thread gives up control of the system via a delay,
 yield or taking a semaphore that does not have a positive count. You
 can inject a vector in to the MCOS instance much like a interrupt, but
 the fiber you are injecting must be a high priority fiber and the system
 must attempt to reschedule to allow the high priority fiber to run.

 The high priority fiber is created but is suspended and when you inject
 the vector or interrupt into the MCOS system it makes the fiber ready
 to be run by placing it on the ready queue when a reschedule occurs.

 The MCOS code is model on "Operating System Design the XINU approach"
 by Dougles Comer. The big difference is XINU is preemptive and XINU
 has a global arrays and variables. MCOS does not contain any global
 variables or arrays as all of the data and structures required for
 running an instance of MCOS is contained in the mInfo_t structure. This
 allows the user to start up more then one MCOS in a single address
 space. Being able to run more then one instance allows DPDK to have
 a single instance of MCOS per logical core and run without interaction
 between the logical cores, which would reduce performance.

 Most of the code for MCOS is located in one .c file and one .h called
 rte_mcos.c and rte_mcos.h files. The rte_mcos.c contains routines like
 mcos_resched() and mcos_spawn(), which are routines I felt needed to
 be non-inline routines as they are not performance critical routines.
 The rest of the APIs for MCOS are located in rte_mcos.h and most of the
 APIs are inline functions as most of the routines are fairly simple
 and inlining them makes some sense.

 MCOS APIs that are not inline functions are contained in mcos.c and each
 function has a simple function header explaining the basic usage of the
 functions. Please look in the code for details.

 The rest of the MCOS APIs are inline functions contained in the rte_mcos.h
 header file. Please look at this file for more details of the functions
 and usage.

 The MCOS system now contains a set of routines and a structure to be the
 master of all of the MCOS instances. The mcos_master_t and mcos_instance_t
 structures by using these structures the master can now monitor and track
 MCOS instances in the system. Their is also a method to send an 8 byte message
 between fibers of an instance and between instances of MCOS. We use a simple
 16 byte structure as a message. The method to transport the message is
 a set of lockless rings from DPDK. To move messages between MCOS instances
 requires a call to mcos_dispatch() routine on a regular interval.

 The first 8 bytes contains the destination and source addresses. The
 address uses a 32 bit word to encode the 2 8 bit instance id, lcore id and
 the 16 bit fiber pid ID. The next 8 bytes can be used by the developer
 as they see fit. It can be a 64 bit pointer or just data encoded into
 the word.

 To execute the example code in examples/mcos directory, you need to build
 a default DPDK system with 'make install T=x86_64-default-linuxapp-gcc'.
 I have not tested this version with icc compiler and the code will only
 runs in Linux user space.
 
 Example code:
 
 #define MAX_FIBERS		10
 uint16_t	syncSemId;
 uint16_t	quit = 0;
 uint16_t	iAmReady[MAX_FIBERS];
 
  void
 nextThread(mInfo_t * mInfo, void * arg)
 {
 	// Wait for everyone to start.
    mcos_wait(mInfo, syncSemId);
 
 	printf("Here I am in (%s)\n", mcos_getfcb(mInfo, mcos_self(mInfo))->name);
 	
 	// Exiting routine kills the fiber.
 }
 
 void
 mainThread(mInfo_t * mInfo, void * arg)
 {
	int32_t		i;
	uint16_t	fids[MAX_FIBERS];
	
	/* Create synchronization semaphore */
    syncSemId = mcos_screate(mInfo, 0);
	
	for(i = 0; i < MAX_FIBERS; i++) {
		fids[i] = mcos_spawn(mInfo, name, 30, 0, (func_t)nextThread, arg);
		mcos_resume( mInfo, fids[i] ); 
	}

    /*
     * Wait for all the tasks to be pending on the synchronization semaphore.
     */

    while (notReady) {
        notReady = FALSE;

        for (i = 0; i < MAX_FIBERS; i++) {
            if (iAmReady[i] == FALSE)
                notReady = TRUE;
        }
        mcos_delay(mInfo, 2);
    }

    mcos_semflush(mInfo, syncSemId);
	
	// Add a loop to wait for all of the fibers to finish.
    do {
    	mcos_delay_ms(mInfo, 250);
    } while( quit == 0 );
    
    // Now terminate them, but they should already be terminated
    for (i = 0; i < MAX_FIBERS; i++)
        mcos_kill(mInfo, fids[i]);

    /* Free resources */

    mcos_sdelete (mInfo, syncSemId);
 }
 
 // This routine is called when MCOS has been inited and the first application thread(s)
 // needs to be started.
 void mcos_init_callback( void * mInfo, void * arg )
{
	mcos_config_t		  * cfg = (mcos_config_t *)arg;
	struct lcore_conf	  * qconf = &lcore_conf[rte_lcore_id()];
	char		buf[32];

    // Save the mInfo structure pointer
    qconf->mInfo	= mInfo;
    qconf->arg		= cfg->arg;

	// Place for the application to call its application entry point.
	// Start all of your fibers from this function.

    snprintf(buf, sizeof(buf), "MainThread%d", rte_lcore_id());
    mcos_resume(mInfo, mcos_spawn(mInfo, buf, 40, 0, (func_t)mainThread, arg));
}

int
main(int argc, char ** argv)
{
	mcos_master_t * master;
	mcos_config_t   config;
    uint32_t		i;
    int32_t			ret;
    unsigned int	lcore_id = 0;

    /* init EAL */
    ret = rte_eal_init(argc, argv);
    if (ret < 0)
        return -1;
    argc -= ret;
    argv += ret;

    /* parse application arguments (after the EAL ones) */
    ret = mcos_parse_args(argc, argv);
    if (ret < 0)
        return -1;

    // Allocate the memory for the MCOS master if needed.
    master = mcos_master_initialize();
    if ( master == NULL )
    	rte_panic("Master MCOS could not be initialized");

    config.master		= master;
    config.num_fibers	= DEFAULT_NUM_FIBERS;
    config.num_semas	= DEFAULT_NUM_SEMAS;
    config.num_mutexs	= DEFAULT_NUM_MUTEXS;

    // Launch the other MCOS based lcores.
    for( i = 0; i < RTE_MAX_LCORES; i++) {
    	if ( ! rte_lcore_is_enabled(i) )
    		continue;
    	config.arg		= &lcore_conf[i];

    	mcos_remote_launch(master, &config, i);
    }

    mcos_timer_setup();

	// Start up the command line, which exits on Control-D
	mcos.cl = cmdline_stdin_new(main_ctx, "mcos> ");
	if ( mcos.cl ) {
		mcos_poll_interact(mcos.cl);
		cmdline_stdin_exit(mcos.cl);
	}
	mcos_stop_running();

	// Wait for all of the cores to stop running and exit.
    RTE_LCORE_FOREACH(lcore_id) {
    	mcos_stop( lcore_conf[lcore_id].mInfo );
        if (rte_eal_wait_lcore(lcore_id) < 0)
            return -1;
    }

    return 0;
}

 Created by Keith Wiles @ Wind River Systems (2012)
