                       Multi-Core OS (MCOS)

MCOS is a non-preemptive OS using a light weight user level threading model.
The basic design under the hood uses setcontext, getcontext, makecontext
and swapcontext to provide the light weight threading model. Some times
the threads are called fibers to be different from pthreads or other
threading models.

No Fiber is ever preempted and the only time a reschedule can occur is
when a fiber or thread gives up control of the system via a delaying,
yielding or taking a semaphore that does not have a positive count.

The MCOS code is model on "Operating System Design the XINU approach"
by Dougles Comer. The big difference is XINU is preemptive and XINU
had global arrays and variables. MCOS does not contain any global
variables or arrays as all of the data and structures required for
running a instance of MCOS is contained in the mInfo_t structure. This
allows the user to start up more then one MCOS in a single address
space.

Most of the code for MCOS is located in one .c file and one .h file. The
mcos.c contains routines like mcos_resched() and mcos_spawn(), which are
routines I felt needed to be in an object. The rest of the API for MCOS
is located in mcos.h and most of the APIs are inline functions as most
of the routines are fairly simple and inlining them makes some sense.

MCOS APIs that are not inline functions are contained in mcos.h and each
function has a simple function header explaining the basic usage of the
functions. Please look in the code for details.

The rest of the MCOS APIs are inline functions contained in the mcos.h
header file. Please look at this file for more details of the functions
and usage.

To execute the example code in examples/mcos directory, you need to build
a default system with 'make install T=x86_64-default-linuxapp-gcc'. I have
not tested this version with icc compiler and the code will only run in
Linux user space.

Keith Wiles @ Wind River Systems (2012)